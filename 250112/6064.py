import sys
from math import gcd

def lcm(a, b):
    return a * b // gcd(a, b) # 최소 공배수

def solve():
    N, M, x, y = map(int, sys.stdin.readline().split())
    
    x -= 1
    y -= 1
    
    limit = lcm(N, M)
    current = x
    
    while current < limit:
        if current % M == y:
            return current + 1
        current += N
    
    return -1 

T = int(sys.stdin.readline().strip())
for _ in range(T):
    print(solve())

"""
탐색 로직 부분을 차근차근 설명드리겠습니다. 예제와 그림을 곁들여 최대한 직관적으로 이해할 수 있도록 하겠습니다.

탐색 로직의 핵심 아이디어
	1.	문제의 목표:
	•	￼ (￼) 형태로 ￼를 만족하는 ￼를 찾는 것입니다.
	•	￼은 첫 번째 달력의 주기이고, ￼은 두 번째 달력의 주기입니다.
	•	우리는 첫 번째 달력의 날짜 ￼에서 시작하여 ￼일씩 이동하면서 두 번째 달력의 날짜 ￼와 일치하는 날을 찾습니다.
	2.	왜 ￼인가?
	•	첫 번째 달력은 ￼-일 주기로 반복되므로, ￼에서 시작한 날짜는 ￼ 형태가 됩니다.
	•	이 값들 중에서 ￼를 만족하는 ￼를 찾아야 합니다.
	3.	왜 ￼인가?
	•	두 번째 달력의 날짜는 ￼-일 주기로 반복됩니다.
	•	특정 날짜 ￼는 ￼로 표현할 수 있습니다. 따라서 ￼가 이 조건을 만족하면 두 달력의 날짜가 동시에 ￼가 됩니다.

구체적인 예제

입력:

￼, ￼, ￼, ￼
	1.	첫 번째 달력의 날짜:
	•	첫 번째 달력에서 날짜는 ￼부터 시작하여 ￼-일 주기로 반복됩니다.
	•	즉, ￼입니다.
	2.	두 번째 달력의 날짜:
	•	두 번째 달력에서 날짜는 ￼로 고정됩니다. ￼를 만족하는 ￼를 찾습니다.
	3.	탐색 과정:
	•	￼: ￼ (조건 불만족)
	•	￼: ￼ (조건 불만족)
	•	￼: ￼ (조건 불만족)
	•	￼: ￼ (조건 만족)
	4.	정답:
	•	￼에서 조건을 만족하므로 정답은 33일입니다.

탐색 로직의 직관적 설명
	1.	￼는 ￼에서 시작하여 ￼만큼 증가하며 두 번째 달력과 일치하는 날을 찾는 과정입니다.
	2.	탐색 범위는 최소공배수 ￼까지로 제한됩니다. 그 이유는 두 달력의 패턴이 ￼마다 반복되기 때문입니다.
	3.	매 반복마다 ￼를 확인하면서 ￼-간격으로 이동하므로, 불필요한 모든 날짜는 건너뛸 수 있습니다.

예제의 흐름을 시각화

첫 번째 달력 (￼):

날짜: 3, 13, 23, 33, 43, 53, 63, ...

두 번째 달력 (￼):

날짜: 9, 21, 33, 45, 57, 69, ...

비교:
	1.	첫 번째 달력: ￼
	2.	두 번째 달력: ￼
	3.	첫 번째와 두 번째 달력이 동시에 맞는 날짜는 ￼입니다.

다시 한번 탐색 로직을 설명
	1.	초기값 설정:
	•	첫 번째 달력에서 시작: ￼ (￼).
	2.	반복 탐색:
	•	￼를 ￼만큼 증가시킴: ￼.
	•	￼인지 확인.
	3.	종료 조건:
	•	￼가 되면 탐색 종료.
	•	조건을 만족하면 정답 반환, 만족하지 않으면 ￼.

코드를 다시 살펴보기

def solve():
    N, M, x, y = map(int, input().split())
    x -= 1  # 1-based -> 0-based
    y -= 1  # 1-based -> 0-based
    
    lcm_val = lcm(N, M)  # 최소공배수 계산
    current = x          # 시작값
    
    while current < lcm_val:  # 최소공배수 내에서 탐색
        if current % M == y:  # 조건 만족 확인
            return current + 1  # 0-based -> 1-based로 변환
        current += N           # N만큼 증가
    
    return -1  # 조건을 만족하지 않는 경우

질문에 대한 요약
	•	￼은 첫 번째 달력의 날짜입니다. ￼를 증가시키며 ￼인지 확인하는 것이 탐색 로직의 핵심입니다.
	•	반복 횟수를 제한하기 위해 ￼까지 탐색합니다.
	•	더 세부적인 부분이나 아직 모호한 점이 있으면 언제든 질문해주세요! 😊
"""
